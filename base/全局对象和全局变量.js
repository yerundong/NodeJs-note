// 1.[全局对象]
// [global]
// 表示Node所在的全局环境，类似于浏览器的window对象。需要注意的是，如果在浏览器中声明一个全局变量，
// 实际上是声明了一个全局对象的属性，比如var x = 1等同于设置window.x = 1，但是Node不是这样，
// 至少在模块中不是这样（REPL环境的行为与浏览器一致）。在模块文件中，声明var x = 1，该变量不是global对象的属性，
// global.x等于undefined。这是因为模块的全局变量都是该模块私有的，其他模块无法取到。
// console.log(global);

// [process]
// 该对象表示Node所处的当前进程，允许开发者与该进程互动。
// console.log(process);

// [console]
// 指向Node内置的console模块，提供命令行环境中的标准输入、标准输出功能。
// console.log(console);

// 2.[全局变量]
// Node提供两个全局变量，都以两个下划线开头。

// [__filename]
// 指向当前运行的脚本文件名。
// console.log(__filename);

// [__dirname]
// 指向当前运行的脚本所在的目录。
// console.log(__dirname);

// 3.[伪全局变量]
// 除此之外，还有一些对象实际上是模块内部的局部变量，指向的对象根据模块不同而不同，但是所有模块都适用，
// 可以看作是伪全局变量，主要为module, module.exports, exports等。
// console.log(module);

// 4.[全局函数]
// [setTimeout()]
// 用于在指定毫秒之后，运行回调函数。实际的调用间隔，还取决于系统因素。间隔的毫秒数在1毫秒到2,147,483,647毫秒（约24.8天）之间。如果超过这个范围，会被自动改为1毫秒。该方法返回一个整数，代表这个新建定时器的编号。

// [clearTimeout()]
// 用于终止一个setTimeout方法新建的定时器。

// [setInterval()]
// 用于每隔一定毫秒调用回调函数。由于系统因素，可能无法保证每次调用之间正好间隔指定的毫秒数，但只会多于这个间隔，而不会少于它。指定的毫秒数必须是1到2,147,483,647（大约24.8天）之间的整数，如果超过这个范围，会被自动改为1毫秒。该方法返回一个整数，代表这个新建定时器的编号。

// [clearInterval()]
// 终止一个用setInterval方法新建的定时器。

// [require()]
// 用于加载模块。

// [Buffer()]
// 用于操作二进制数据。

